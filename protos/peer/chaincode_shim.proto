/*
Copyright IBM Corp. 2017 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;
option java_package = "org.inklabsfoundation.inkchain.protos.peer";
option go_package = "github.com/inklabsfoundation/inkchain/protos/peer";
import "peer/chaincode_event.proto";
import "peer/proposal.proto";
import "google/protobuf/timestamp.proto";

message ChaincodeMessage {

    enum Type {
        UNDEFINED = 0;
        REGISTER = 1;
        REGISTERED = 2;
        INIT = 3;
        READY = 4;
        TRANSACTION = 5;
        COMPLETED = 6;
        ERROR = 7;
        GET_STATE = 8;
        PUT_STATE = 9;
        DEL_STATE = 10;
        INVOKE_CHAINCODE = 11;
        RESPONSE = 13;
        GET_STATE_BY_RANGE = 14;
        GET_QUERY_RESULT = 15;
        QUERY_STATE_NEXT = 16;
        QUERY_STATE_CLOSE = 17;
        KEEPALIVE = 18;
        GET_HISTORY_FOR_KEY = 19;
        TRANSFER = 820;
        ISSUE_TOKEN = 821;
        GET_ACCOUNT = 823;
        CROSS_TRANSFER = 824;
    }

    Type type = 1;
    google.protobuf.Timestamp timestamp = 2;
    bytes payload = 3;
    string txid = 4;

    SignedProposal proposal = 5;

    //event emmited by chaincode. Used only with Init or Invoke.
    // This event is then stored (currently)
    //with Block.NonHashData.TransactionResult
    ChaincodeEvent chaincode_event = 6;
}

message PutStateInfo {
    string key = 1;
    bytes value = 2;
}

message GetStateByRange {
    string startKey = 1;
    string endKey = 2;
}

message GetQueryResult {
    string query = 1;
}

message GetHistoryForKey {
    string key = 1;
}

message QueryStateNext {
    string id = 1;
}

message QueryStateClose {
    string id = 1;
}

message QueryResultBytes {
    bytes resultBytes = 1;
}

message QueryResponse {
    repeated QueryResultBytes results = 1;
    bool has_more = 2;
    string id = 3;
}

message CrossTransfer {
    bytes to=1;
    bytes amount = 3;
}
message CrossTransferInfo {
    repeated CrossTransfer tranSet = 1;
    bytes pubTxId = 2;
    bytes fromPlatForm = 3;
    bytes balanceType =4;
}

message Transfer {
    bytes to=1;
    bytes balanceType = 2;
    bytes amount = 3;
}

message TransferInfo {
    repeated Transfer tranSet = 1;
}

message IssueTokenInfo {
    bytes address = 1;
    bytes balanceType = 2;
    bytes amount = 3;
}
// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
service ChaincodeSupport {

    rpc Register(stream ChaincodeMessage) returns (stream ChaincodeMessage) {}


}
